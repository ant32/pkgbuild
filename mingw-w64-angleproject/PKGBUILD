# Maintainer: ant32 <antreimer@gmail.com>
# Contributor: Filip Brcic <brcha@gna.org>
# Contributor: xantares
# Contributor: jellysheep <max.mail@dameweb.de>

pkgname=mingw-w64-angleproject
pkgver=1.0.0.r2215
pkgrel=4
arch=('any')
pkgdesc="Angle project (mingw-w64)"
depends=('mingw-w64-crt')
makedepends=('mingw-w64-gcc' 'gyp-svn' 'git')
options=('!strip' '!buildflags' 'staticlibs')
license=('LGPLv2+')
url="http://code.google.com/p/angleproject/"
source=("angleproject::git+https://code.google.com/p/angleproject#commit=5abbd86"
        'angleproject-fix-case-sensitive-include.patch'
        'angleproject-include-import-library-and-use-def-file.patch'
        'angleproject-fix-mingw-compatibility.patch'
        'angleproject-fix-typedefs-for-win64.patch'
        'angleproject-export-shader-symbols.patch')
sha256sums=('SKIP'
            '9ad491c4fca5d93c6579353c66af9083095cc35bf3044e9056d5fabb242d9883'
            '3e2c3a5e1d553902dee8937f06155d8a1be6e77058dc21ef03d425aa69863a96'
            'd0d2074b43ff08f34f65332d7f00b1b79b7b5cdd203962a696384e4ee66f8a58'
            '1f29c271d42b85a1f3bb969d736b263d44e8322d24edf08c591b04b065435581'
            'f7da8143cd303e971ec1a5506219067e76cd01bc467913cc90571d2a7e141dfa')

_architectures="i686-w64-mingw32 x86_64-w64-mingw32"

prepare() {
  cd "${srcdir}/angleproject"

  # File names are case-sensitive on Linux
  patch -p0 -i "${srcdir}/angleproject-fix-case-sensitive-include.patch"

  # Make sure an import library is created and the correct .def file is used during the build
  patch -p0 -i "${srcdir}/angleproject-include-import-library-and-use-def-file.patch"

  # .def pieces taken from http://qt.gitorious.org/qt/qtbase/commit/b2c44985e740d0a0ea86b7b9f4cc849258ac2340
  patch -p0 -i "${srcdir}/angleproject-fix-mingw-compatibility.patch"

  # http://qt.gitorious.org/qt/qtbase/commit/dc2bfb6f8977732e1cd5ed9faac5a32870e2967a
  # Fix typedefs for Win64
  # The long int type is incorrect for Windows 64-bit as LLP64 is used there.
  patch -p4 -i "${srcdir}/angleproject-fix-typedefs-for-win64.patch"

  # WebKit depends on symbols which are used in the static library called translator_hlsl
  # This static library is linked into the libGLESv2 shared library
  # To allow building WebKit export the required symbols in the libGLESv2 shared library
  patch -p0 -i "${srcdir}/angleproject-export-shader-symbols.patch"
}

build() {
  cd "${srcdir}/angleproject"

  export CFLAGS="-O2 -g -pipe -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions --param=ssp-buffer-size=4"
  export CXXFLAGS="-O2 -g -pipe -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions --param=ssp-buffer-size=4"
  unset LDFLAGS

  for _arch in ${_architectures}; do
    mkdir -p build-${_arch} && pushd build-${_arch}

    export CXX="${_arch}-g++"
    export AR="${_arch}-ar"

    if [ "${_arch}" = "i686-w64-mingw32" ]; then
      target="win32"
    else
      target="win64"
    fi

    gyp -D OS=win -D TARGET=$target --depth . -I ../build/common.gypi ../src/build_angle.gyp

    # Make sure the correct libraries are linked in
    sed -i s@'^LIBS :='@'LIBS := -ld3d9'@ ../src/libGLESv2.target.mk
    sed -i s@'^LIBS :='@'LIBS := -ld3d9 -ldxguid -L. -lGLESv2'@ ../src/libEGL.target.mk

    make V=1 CXXFLAGS="-std=c++11 -msse2 -DUNICODE -D_UNICODE"

    # Also build static libraries (which are needed by the static Qt build)
    ${AR} rcs libGLESv2.a out/Debug/obj.target/libGLESv2/../src/common/debug.o out/Debug/obj.target/libGLESv2/../src/common/RefCountObject.o \
      out/Debug/obj.target/libGLESv2/../src/libGLESv2/IndexDataManager.o out/Debug/obj.target/libGLESv2/../src/libGLESv2/VertexDataManager.o \
      out/Debug/obj.target/libGLESv2/../src/libGLESv2/Blit.o out/Debug/obj.target/libGLESv2/../src/libGLESv2/Buffer.o \
      out/Debug/obj.target/libGLESv2/../src/libGLESv2/Context.o out/Debug/obj.target/libGLESv2/../src/libGLESv2/D3DConstantTable.o \
      out/Debug/obj.target/libGLESv2/../src/libGLESv2/Fence.o out/Debug/obj.target/libGLESv2/../src/libGLESv2/Float16ToFloat32.o \
      out/Debug/obj.target/libGLESv2/../src/libGLESv2/Framebuffer.o out/Debug/obj.target/libGLESv2/../src/libGLESv2/HandleAllocator.o \
      out/Debug/obj.target/libGLESv2/../src/libGLESv2/libGLESv2.o out/Debug/obj.target/libGLESv2/../src/libGLESv2/main.o \
      out/Debug/obj.target/libGLESv2/../src/libGLESv2/Program.o out/Debug/obj.target/libGLESv2/../src/libGLESv2/ProgramBinary.o \
      out/Debug/obj.target/libGLESv2/../src/libGLESv2/Query.o out/Debug/obj.target/libGLESv2/../src/libGLESv2/Renderbuffer.o \
      out/Debug/obj.target/libGLESv2/../src/libGLESv2/ResourceManager.o out/Debug/obj.target/libGLESv2/../src/libGLESv2/Shader.o \
      out/Debug/obj.target/libGLESv2/../src/libGLESv2/Texture.o out/Debug/obj.target/libGLESv2/../src/libGLESv2/TextureSSE2.o \
      out/Debug/obj.target/libGLESv2/../src/libGLESv2/utilities.o out/Debug/obj.target/../src/libtranslator_hlsl.a \
      out/Debug/obj.target/../src/libtranslator_common.a out/Debug/obj.target/../src/libpreprocessor.a 
    ${AR} rcs libEGL.a out/Debug/obj.target/libEGL/../src/common/debug.o out/Debug/obj.target/libEGL/../src/common/RefCountObject.o \
      out/Debug/obj.target/libEGL/../src/libEGL/Config.o out/Debug/obj.target/libEGL/../src/libEGL/Display.o \
      out/Debug/obj.target/libEGL/../src/libEGL/libEGL.o out/Debug/obj.target/libEGL/../src/libEGL/main.o \
      out/Debug/obj.target/libEGL/../src/libEGL/Surface.o

    popd
  done
}

package() {
  cd "${srcdir}/angleproject"

  for _arch in ${_architectures}; do
    pushd build-${_arch}

    mkdir -p "${pkgdir}/usr/${_arch}/"{bin,lib,include}

    install out/Debug/src/libGLESv2.so "${pkgdir}/usr/${_arch}/bin/libGLESv2.dll"
    install out/Debug/src/libEGL.so "${pkgdir}/usr/${_arch}/bin/libEGL.dll"

    install libGLESv2.a "${pkgdir}/usr/${_arch}/lib/"
    install libEGL.a "${pkgdir}/usr/${_arch}/lib/"

    install libGLESv2.dll.a "${pkgdir}/usr/${_arch}/lib/"
    install libEGL.dll.a "${pkgdir}/usr/${_arch}/lib/"
    cp -Rv ../include/* "${pkgdir}/usr/${_arch}/include/"

    ${_arch}-strip --strip-unneeded "${pkgdir}/usr/${_arch}/bin/"*.dll
    ${_arch}-strip -g "${pkgdir}/usr/${_arch}/lib/"*.a
    popd
  done
}
