# Maintainer: ant32 <antreimer@gmail.com>
# Contributor: Filip Brcic <brcha@gna.org>
# Contributor: jellysheep <max.mail@dameweb.de>

pkgname=mingw-w64-qt5-base
pkgver=5.2.0
pkgrel=6
pkgdesc='A cross-platform application and UI framework (mingw-w64)'
arch=('i686' 'x86_64')
url="http://qt-project.org/"
license=('GPL3' 'LGPL')
depends=(
  'mingw-w64-crt'
  'mingw-w64-zlib'
  'mingw-w64-libjpeg-turbo'
  'mingw-w64-libiconv'
  'mingw-w64-sqlite3'
  'mingw-w64-libpng'
  'mingw-w64-openssl'
  'mingw-w64-dbus'
  'mingw-w64-pcre'
  'qtchooser'
)
optdepends=(
  'mingw-w64-postgresql-libs: PostgreSQL support'
  'mingw-w64-libmariadbclient: MariaDB/MySQL support'
)
makedepends=('mingw-w64-gcc'
             'mingw-w64-postgresql-libs'
             'mingw-w64-libmariadbclient'
             'mingw-w64-pkg-config')
options=(!strip !buildflags staticlibs)
replaces=("${pkgname/qt5-/qt5-qt}<=5.1.1")
conflicts=("${pkgname/qt5-/qt5-qt}")
_pkgfqn="qtbase-opensource-src-${pkgver}"
source=("http://download.qt-project.org/official_releases/qt/5.2/${pkgver}/submodules/${_pkgfqn}.tar.xz"
        'qt5-merge-static-and-shared-library-trees.patch'
        'qt5-add-angle-support.patch'
        'angle-fix.patch'
        'qt5-use-external-angle-library.patch'
        'qt5-workaround-qtbug-29426.patch'
        'qt5-workaround-pkgconfig-install-issue.patch'
        'qt5-qtbase-fix-linking-against-static-pcre.patch'
        'qt5-dont-build-host-libs-static.patch'
        'qt5-enable-rpath-for-host-tools.patch'
        'qt5-add-compiled-shaders-remove-dxsdk.patch'
        'qt5-dont-add-resource-files-to-qmake-libs.patch'
        'qt5-prevent-debug-library-names-in-pkgconfig-files.patch'
        'qt5-qmake-implib-dll-a.patch'
        'qt5-use-win32-g++-mkspecs-profile.patch'
        'qt5-use-system-zlib-in-host-libs.patch'
        'qt-5.1.x-win_flex-replace.patch')
sha256sums=('51556cd2562a6d4bbb70ffcc93e8ef83ec79b170753aac6e4b195957c61cb628'
            '8cd6368120dcc5277dc3ff3840cbe46e6013e084635c3e9fe7eda4853c248b99'
            'cbab245e7a5850e0a856372a783a45afad4e5f00ccc3cbe02f54b51e205ab729'
            'e8bb712ed739420c4a7c54dd005600a8f900852d926bdab97949af482a31b0b0'
            '6dcc123a3cf0434b8d0dfa529e672e9609c3db5a93303634cee57ce0ba41772c'
            '9bcd8e31328eb34b5e729c06a668230493443dc204b86110a36dd025dc56388a'
            'f000b4e3b85c2053194c016916799da3568fe6a93f76114b41a140699bb86e3e'
            '69cc28fd2e0f26b1ac690c253818d3c10e8e5c9ee241c9cca78cf90aae9e784b'
            'c6916daf4348280c73e7dd073389c7043b97520673c05c2cebadba18e5f465ea'
            '8bec9d06a5ab2c56bb8aa94649b02392c6090e8918a6f2b1dd8b36087f2c6de9'
            '182d3e02de8561d56909f78fbfcbdac2fe39b99edd6cb7e19f47d43576137f86'
            'ccad04a577de8a175cb6cae7e0863e960daeab2014bc3abe0736763ebf3ce552'
            '99ad1e1d328b47550b4112b3804a744eb66334ef74d2eb74f5dd18adf015c3e6'
            'bda0497762586663ba663ee464781f6f5ef8cee578bdade0e0baf0a949d315b4'
            '21bd22822167392595c07266f2885361ecfd8f343a81b4acc1eb8078ed8228ef'
            '924174cefaa220579be59bd4ee362a23413e122beb81fcb0460504bfc41372be'
            '1c6ae7ac8f0d3a3258ca582cab3df10310d06ea874ffa56f7a4a04222dccf1f1')
_architectures="i686-w64-mingw32 x86_64-w64-mingw32"

# Helper functions for the split builds
isStatic() {
  [ $pkgname = "mingw-w64-qt5-base-static" ]
}

isOpenGL() {
  [ $pkgname = "mingw-w64-qt5-base-opengl" ]
}

isInternalAngle() {
  [ $pkgname = "mingw-w64-qt5-base-internal-angle" ]
}

isStatic && depends+=("mingw-w64-qt5-base")
! isOpenGL && ! isInternalAngle && depends+=("mingw-w64-angleproject")
isOpenGL || isInternalAngle && provides+=("mingw-w64-qt5-base")
isOpenGL || isInternalAngle && conflicts+=("mingw-w64-qt5-base")
isInternalAngle && conflicts+=("mingw-w64-angleproject")

prepare() {
  cd "${srcdir}/${_pkgfqn}"

  # When building Qt as static library some files have a different content
  # when compared to the static library. Merge those changes manually.
  # This patch also applies some additional changes which are required to make
  # linking against the static version of Qt work without any manual fiddling
  patch -p0 -i "${srcdir}/qt5-merge-static-and-shared-library-trees.patch"

  if ! isOpenGL; then
    # Add support for Angle
    patch -p0 -i "${srcdir}/qt5-add-angle-support.patch"
  fi
  if ! isOpenGL && ! isInternalAngle; then
    # Make sure our external Angle package is used instead of the bundled one
    patch -p0 -i "${srcdir}/qt5-use-external-angle-library.patch"
  fi

  # Workaround cross-compilation issue when using a non-x86 host
  # https://bugreports.qt-project.org/browse/QTBUG-29426
  patch -p0 -i "${srcdir}/qt5-workaround-qtbug-29426.patch"

  # Make sure the .pc files of the Qt5 modules are installed correctly
  patch -p0 -i "${srcdir}/qt5-workaround-pkgconfig-install-issue.patch"

  # Prevents resource files from being added to the LIBS parameter
  # This solves an issue where the generated pkg-config files contained
  # invalid Libs.private references like .obj/debug/Qt5Cored_resource_res.o
  patch -p1 -i "${srcdir}/qt5-dont-add-resource-files-to-qmake-libs.patch"

  # qmake generates the pkgconfig .pc files two times, once for the
  # release build and once for the debug build (which we're not actually
  # building in this package). For both generations the exact same
  # pkgconfig file name is used. This causes references to the debug
  # build ending up in the .pc files which are unwanted
  # Prevent this from happening by giving the pkgconfig .pc
  # files for the debug build an unique file name
  patch -p1 -i "${srcdir}/qt5-prevent-debug-library-names-in-pkgconfig-files.patch"

  # Fix qmake to create implibs with .dll.a extension for MinGW
  patch -p1 -i "${srcdir}/qt5-qmake-implib-dll-a.patch"

  # Patch the win32-g++ mkspecs profile to match our environment
  patch -p0 -i "${srcdir}/qt5-use-win32-g++-mkspecs-profile.patch"

  # The bundled pcre is built as static library by default
  # As we're not using the bundled copy but our own copy
  # we need to do some fiddling to fix compilation issues
  # when trying to build static qmake projects
  patch -p1 -i "${srcdir}/qt5-qtbase-fix-linking-against-static-pcre.patch"

  # Upstream always wants the host libraries to be static instead of
  # shared libraries. This causes issues and is against the Fedora
  # packaging guidelines so disable this 'feature'
  patch -p0 -i "${srcdir}/qt5-dont-build-host-libs-static.patch"

  # Build host tools with rpath enabled
  # We have to use rpath here as the library which the
  # various tools depend on (libQt5Bootstrap.so) resides
  # in the folder /usr/${_arch}/lib
  # We can't use the regular %%_libdir for this as we
  # want to avoid conflicts with the native qt5 packages
  patch -p1 -i "${srcdir}/qt5-enable-rpath-for-host-tools.patch"

  # Build host libs with system zlib. This patch cannot be upstreamed as-is
  # due to the other host-libs patches.
  patch -p1 -i "${srcdir}/qt5-use-system-zlib-in-host-libs.patch"

  if ! isInternalAngle; then
    # Make sure the Qt5 build system uses our external ANGLE library
    rm -rf src/3rdparty/angle include/QtANGLE/{EGL,GLES2,KHR}
  fi

  # As well as our external PCRE library and zlib
  rm -rf src/3rdparty/{pcre,zlib}

  if isInternalAngle; then
    # fix make[6]: win_flex: Command not found
    patch -p2 -i "${srcdir}/qt-5.1.x-win_flex-replace.patch"
    # Fix Angle. See https://code.google.com/p/angleproject/issues/detail?id=462
    patch -p0 -i "${srcdir}/angle-fix.patch"
    patch -p0 < "${srcdir}/qt5-add-compiled-shaders-remove-dxsdk.patch"
    find ./src/3rdparty/angle -type f -and \( -name *.h -or -name *.cpp \) | xargs sed -i \
      -e 's_#include <D3Dcompiler.h>_#include <d3dcompiler.h>_' \
      -e 's_#include "libGLESv2/Constants.h"_#include "libGLESv2/constants.h"_'
  fi
}

build() {
  cd "${srcdir}/${_pkgfqn}"

  # Setup flags
  export CFLAGS="-O2 -g -pipe -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions --param=ssp-buffer-size=4"
  export CXXFLAGS="-O2 -g -pipe -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions --param=ssp-buffer-size=4"
  unset LDFLAGS

  for _arch in ${_architectures}; do

    # Phonon is disabled for now because we lack the directx headers
    # The odd paths for the -hostbindir argument are on purpose
    # The qtchooser tool assumes that the tools 'qmake', 'moc' and others
    # are all available in the same folder with these exact file names
    # To prevent conflicts with the mingw-qt (Qt4) package we have
    # to put these tools in a dedicated folder
    qt_configure_args="\
      -xplatform win32-g++ \
      -optimized-qmake \
      -verbose \
      -opensource \
      -confirm-license \
      -force-pkg-config \
      -force-debug-info \
      -audio-backend \
      -system-zlib \
      -system-libpng \
      -system-libjpeg \
      -system-sqlite \
      -no-fontconfig \
      -iconv \
      -openssl \
      -dbus-linked \
      -no-glib \
      -no-gtkstyle \
      -no-icu \
      -release \
      -nomake examples \
      -make tools \
      -hostprefix /usr/${_arch} \
      -hostdatadir /usr/${_arch}/lib/qt \
      -hostbindir /usr/${_arch}/lib/qt/bin \
      -prefix /usr/${_arch} \
      -bindir /usr/${_arch}/bin \
      -archdatadir /usr/${_arch}/lib/qt \
      -datadir /usr/${_arch}/share/qt \
      -docdir /usr/${_arch}/share/doc/qt \
      -examplesdir /usr/${_arch}/share/qt/examples \
      -headerdir /usr/${_arch}/include/qt \
      -libdir /usr/${_arch}/lib \
      -plugindir /usr/${_arch}/lib/qt/plugins \
      -sysconfdir /usr/${_arch}/etc \
      -translationdir /usr/${_arch}/share/qt/translations \
      -device-option CROSS_COMPILE=${_arch}-"

    isOpenGL && qt_configure_args+=' -opengl desktop'

    unset PKG_CONFIG_PATH

    # MySQL lib is -lmysql not mysqlclient, so fix that in config tests
    sed -e 's|lmysqlclient_r|lmysql|g' -i "${srcdir}/${_pkgfqn}/config.tests/unix/mysql_r/mysql_r.pro"
    sed -e 's|lmysqlclient|lmysql|g' -i "${srcdir}/${_pkgfqn}/config.tests/unix/mysql/mysql.pro"
    # add QMAKE_CFLAGS_MYSQL to mysql cflags
    echo 'LIBS *= $$QT_LFLAGS_MYSQL' >> "${srcdir}/${_pkgfqn}/src/sql/drivers/mysql/qsql_mysql.pri"
    echo 'QMAKE_CXXFLAGS *= $$QT_CFLAGS_MYSQL' >> "${srcdir}/${_pkgfqn}/src/sql/drivers/mysql/qsql_mysql.pri"
    # Qt doesn't detect mysql correctly, so use this:
    export QT_CFLAGS_MYSQL="-I/usr/${_arch}/include/mysql -DBIG_JOINS=1"
    export QT_LFLAGS_MYSQL="-L/usr/${_arch}/lib -lmysql -lpthread -lz -lm -lssl -lcrypto"
    export QT_LFLAGS_MYSQL_R="-L/usr/${_arch}/lib -lmysql -lpthread -lz -lm -lssl -lcrypto"
    # Hardcode MySQL flags into configure (really nice solution :( )
    sed -e "s|^QT_CFLAGS_MYSQL=.*$|QT_CFLAGS_MYSQL=\"${QT_CFLAGS_MYSQL}\"|g" -i "${srcdir}/${_pkgfqn}/configure"
    sed -e "s|^QT_LFLAGS_MYSQL=.*$|QT_LFLAGS_MYSQL=\"${QT_LFLAGS_MYSQL}\"|g" -i "${srcdir}/${_pkgfqn}/configure"
    sed -e "s|^QT_LFLAGS_MYSQL_R=.*$|QT_LFLAGS_MYSQL_R=\"${QT_LFLAGS_MYSQL_R}\"|g" -i "${srcdir}/${_pkgfqn}/configure"
    qt_configure_args_mysql="-mysql_config /this/file/should/not/exist"

    mkdir ../build-${_arch} && pushd ../build-${_arch}

    if isStatic; then
      ../${_pkgfqn}/configure -static $qt_configure_args $qt_configure_args_mysql
      make
    else
      # The LD_LIBRARY_PATH override is needed because libQt5Bootstrap* are shared
      # libraries which various compiled tools (like moc) use. As the libQt5Bootstrap*
      # libraries aren't installed at this point yet, we have to workaround this
      ../${_pkgfqn}/configure -shared $qt_configure_args $qt_configure_args_mysql
      LD_LIBRARY_PATH=`pwd`/lib make
    fi

    popd
  done
}

package() {
  for _arch in ${_architectures}; do
    cd "$srcdir/${_pkgfqn}"
    make install -C ../build-${_arch} INSTALL_ROOT="${pkgdir}"

    if isStatic; then
      # The pkg-config files for Qt5Bootstrap aren't interesting as this particular
      # library only contains native code and not cross-compiled code
      rm -f "${pkgdir}/usr/${_arch}/lib/pkgconfig/Qt5Bootstrap.pc"

      # Drop the qtmain and Qt5Bootstrap static libraries from the static tree as
      # they are already part of the main tree
      rm -f "${pkgdir}/usr/${_arch}/lib/libqtmain"*
      rm -f "${pkgdir}/usr/${_arch}/lib/libQt5Bootstrap"*

      # we want to keep a couple pri files not found in base
      mv "${pkgdir}/usr/${_arch}/lib/qt/mkspecs/modules/qt_plugin_"*.pri "${pkgdir}/usr/${_arch}"

      # Delete duplicate files that are in the base package
      rm -fR "${pkgdir}/usr/${_arch}/"{include,share}
      rm -fR "${pkgdir}/usr/${_arch}/lib/"{qt/bin,qt/mkspecs,pkgconfig,cmake}

      # move pri files back
      mkdir -p "${pkgdir}/usr/${_arch}/lib/qt/mkspecs/modules"
      mv "${pkgdir}/usr/${_arch}/"*.pri "${pkgdir}/usr/${_arch}/lib/qt/mkspecs/modules"
    else # not static => shared release

      # The mingw gcc compiler assumes that /usr/i686-w64-mingw32/lib and
      # /usr/x86_64-w64-mingw32/lib are paths which need to be searched
      # during linking for cross-compiled libraries. As this isn't intended and
      # introduces unwanted side effects (related to building mingw-qt5-qttools)
      # remove the reference to it
      # THIS DOES NOT CORRECTLY WORK SINCE FEDORA HAS BOTH /usr/$arch/lib AND /usr/$arch/sys-root/mingw/lib
      sed -i s@"\"/usr/${_arch}/lib\" "@@g "${pkgdir}/usr/${_arch}/lib/qt/mkspecs/qconfig.pri"

      # Rename qtmain.a to a non-conflicting file name
      # The updated filename is already set correctly in the bundled mkspecs profiles
      mv "${pkgdir}/usr/${_arch}/lib/libqtmain.a" "${pkgdir}/usr/${_arch}/lib/libqt5main.a"

      # The .dll's are installed in both bindir and libdir
      # One copy of the .dll's is sufficient
      rm -f "${pkgdir}/usr/${_arch}/lib/"*.dll

      # Remove various unneeded files belonging to the Qt5Bootstrap library
      rm -f "${pkgdir}/usr/${_arch}/lib/libQt5Bootstrap"{,DBus}.{la,prl}

      # Add qtchooser support
      [ "${_arch}" =  "i686-w64-mingw32" ] && mingwn='mingw32' || mingwn='mingw64'
      mkdir -p "${pkgdir}/etc/xdg/qtchooser"
      echo "/usr/${_arch}/lib/qt/bin" >  "${pkgdir}/etc/xdg/qtchooser/$mingwn-qt5.conf"
      echo "/usr/${_arch}/lib" >> "${pkgdir}/etc/xdg/qtchooser/$mingwn-qt5.conf"

      # Manually install qmake and other native tools so we don't depend anymore on
      # the version of the native system Qt and also fix issues as illustrated at
      # http://stackoverflow.com/questions/6592931/building-for-windows-under-linux-using-qt-creator
      # Also make sure the tools can be found by CMake
      mkdir -p "${pkgdir}/usr/bin"
      for tool in qmake moc rcc uic qdbuscpp2xml qdbusxml2cpp qdoc syncqt.pl; do
        ln -s ../${_arch}/lib/qt/bin/${tool} "${pkgdir}/usr/bin/${_arch}-${tool}-qt5"
      done
    fi

    # Remove prl files
    rm -f "${pkgdir}/usr/${_arch}/lib"{,/qt/plugins/*}/*.prl

    # And finaly, strip the binaries
    if isStatic; then
      ${_arch}-strip --strip-debug "${pkgdir}/usr/${_arch}/lib/"*.a # static libs
    else
      ${_arch}-strip --strip-unneeded "${pkgdir}/usr/${_arch}/lib/libqt5main"*.a
      ${_arch}-strip --strip-unneeded "${pkgdir}/usr/${_arch}/bin/"*.dll
      ${_arch}-strip --strip-unneeded "${pkgdir}/usr/${_arch}/lib/"*.dll.a # dynamic lib interfaces
      ${_arch}-strip --strip-unneeded "${pkgdir}/usr/${_arch}/lib/qt/plugins/"*/*.dll
      strip --strip-unneeded "${pkgdir}/usr/${_arch}/lib/libQt5Bootstrap"{,DBus}.so.${pkgver}
    fi
  done
}
