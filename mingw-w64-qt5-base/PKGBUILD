# Maintainer: ant32 <antreimer@gmail.com>
# Contributor: Filip Brcic <brcha@gna.org>

pkgname=mingw-w64-qt5-base
pkgver=5.2.0
pkgrel=1
pkgdesc='A cross-platform application and UI framework (mingw-w64)'
arch=('i686' 'x86_64')
url="http://qt-project.org/"
license=('GPL3' 'LGPL')
depends=(
  'mingw-w64-crt'
  'mingw-w64-zlib'
  'mingw-w64-libjpeg-turbo'
  'mingw-w64-libiconv'
  'mingw-w64-libtiff'
  'mingw-w64-sqlite3'
  'mingw-w64-libpng'
  'mingw-w64-openssl'
  'mingw-w64-dbus'
  'mingw-w64-angleproject'
  'mingw-w64-pcre'
)
optdepends=(
  'mingw-w64-postgresql-libs: PostgreSQL support'
  'mingw-w64-libmariadbclient: MariaDB/MySQL support'
)
makedepends=('mingw-w64-gcc'
             'mingw-w64-postgresql-libs'
             'mingw-w64-libmariadbclient'
             'mingw-w64-pkg-config')
options=(!strip !buildflags staticlibs)
replaces=("${pkgname/qt5-/qt5-qt}<=5.1.1")
conflicts=("${pkgname/qt5-/qt5-qt}")
_pkgfqn="qtbase-opensource-src-${pkgver}"
source=("http://download.qt-project.org/official_releases/qt/5.2/${pkgver}/submodules/${_pkgfqn}.tar.xz"
        'qmake.conf.win32'
	'qmake.conf.win64'
        'qt5-merge-static-and-shared-library-trees.patch'
        'qt5-add-angle-support.patch'
        'qt5-use-external-angle-library.patch'
        'qt5-dont-segfault-when-platform-dll-cant-be-found.patch'
        'qt5-define-qt-needs-qmain-for-win32-g++-targets.patch'
        'qt5-workaround-qtbug-29426.patch'
        'qt5-workaround-pkgconfig-install-issue.patch'
        'qt5-qtbase-fix-linking-against-static-pcre.patch'
        'qt5-dont-build-host-libs-static.patch'
        'qt5-enable-rpath-for-host-tools.patch'
        'qt5-fix-cmake-support.patch'
  )
sha256sums=('51556cd2562a6d4bbb70ffcc93e8ef83ec79b170753aac6e4b195957c61cb628'                                                                                                                                        
            '50d890d2544f50b36ba1e82ecfb87b8a60fe6423b860a9852db0ba07afcf0c07'
            'bbb8e2d8d71d753d4bb712611b7124a28d87bcca634220ec611ab5a727777929'
            '5890ac038761aab541753b80d9f909c92dbf6b074a15c6e7ad3edfa6f8799993'
            'cbab245e7a5850e0a856372a783a45afad4e5f00ccc3cbe02f54b51e205ab729'
            'e3914d7c8a32bbbbaa9cf4befcf1b559446d1fdbafa462c3b1bad45ac62069ff'
            'f3eb1fa4aa5d0946350bcc117625f4793fe895cac52777d70cfac1b66b769e62'
            'f45c4d51721e42c78b408aa3ab2931ef85b719db0abab4a65dc7af022f6491c6'
            '9bcd8e31328eb34b5e729c06a668230493443dc204b86110a36dd025dc56388a'
            'f000b4e3b85c2053194c016916799da3568fe6a93f76114b41a140699bb86e3e'
            '69cc28fd2e0f26b1ac690c253818d3c10e8e5c9ee241c9cca78cf90aae9e784b'
            '3b3ccfeac9888519719548a7bf0e126c794f7f217712bfeb246db3add4a3aaa6'
            '8bec9d06a5ab2c56bb8aa94649b02392c6090e8918a6f2b1dd8b36087f2c6de9'
            'cce5c707ebd3f8d866b9f75e55816340f3303a4733c2a5f1ad523ff1e97b186f')
_architectures="i686-w64-mingw32 x86_64-w64-mingw32"

# Helper functions for the split builds
isStatic() {
  [ $pkgname = "mingw-w64-qt5-base-static" ]
}

isStatic && depends+=("mingw-w64-qt5-base")

prepare() {
  cd "${srcdir}/${_pkgfqn}"

  # When building Qt as static library some files have a different content
  # when compared to the static library. Merge those changes manually.
  # This patch also applies some additional changes which are required to make
  # linking against the static version of Qt work without any manual fiddling
  patch -p0 -i "${srcdir}/qt5-merge-static-and-shared-library-trees.patch"

  # Add support for Angle
  patch -p0 -i "${srcdir}/qt5-add-angle-support.patch"

  # Make sure our external Angle package is used instead of the bundled one
  patch -p0 -i "${srcdir}/qt5-use-external-angle-library.patch"

  # Prevent a segfault when no suitable platform plugin could be detected
  patch -p0 -i "${srcdir}/qt5-dont-segfault-when-platform-dll-cant-be-found.patch"

  # Make sure QT_NEEDS_QMAIN is defined for our mkspecs profiles
  patch -p0 -i "${srcdir}/qt5-define-qt-needs-qmain-for-win32-g++-targets.patch"

  # Workaround cross-compilation issue when using a non-x86 host
  # https://bugreports.qt-project.org/browse/QTBUG-29426
  patch -p0 -i "${srcdir}/qt5-workaround-qtbug-29426.patch"
      
  # Make sure the .pc files of the Qt5 modules are installed correctly
  patch -p0 -i "${srcdir}/qt5-workaround-pkgconfig-install-issue.patch"

  # The bundled pcre is built as static library by default
  # As we're not using the bundled copy but our own copy
  # we need to do some fiddling to fix compilation issues
  # when trying to build static qmake projects
  patch -p1 -i "${srcdir}/qt5-qtbase-fix-linking-against-static-pcre.patch"

  # Upstream always wants the host libraries to be static instead of
  # shared libraries. This causes issues and is against the Fedora
  # packaging guidelines so disable this 'feature'
  patch -p0 -i "${srcdir}/qt5-dont-build-host-libs-static.patch"

  # Build host tools with rpath enabled
  # We have to use rpath here as the library which the
  # various tools depend on (libQt5Bootstrap.so) resides
  # in the folder /usr/${_arch}/lib
  # We can't use the regular %%_libdir for this as we
  # want to avoid conflicts with the native qt5 packages
  patch -p1 -i "${srcdir}/qt5-enable-rpath-for-host-tools.patch"

  # Fix CMake support (RHBZ #1019952, RHBZ #1019947)
  patch -p0 -i "${srcdir}/qt5-fix-cmake-support.patch"

  # Cross-compilation qmake target.
  platform_win32='win32-g++-cross'
  platform_win64='win32-g++-cross-x64'
  mkdir mkspecs/${platform_win32}
  mkdir mkspecs/${platform_win64}
  install -m644 "${srcdir}/qmake.conf.win32" mkspecs/${platform_win32}/qmake.conf
  install -m644 "${srcdir}/qmake.conf.win64" mkspecs/${platform_win64}/qmake.conf
  install -m644 mkspecs/win32-g++/qplatformdefs.h mkspecs/${platform_win32}/
  install -m644 mkspecs/win32-g++/qplatformdefs.h mkspecs/${platform_win64}/

  # Make sure the Qt5 build system uses our external ANGLE library
  rm -rf src/3rdparty/angle include/QtANGLE/{EGL,GLES2,KHR}

  # As well as our external PCRE library
  rm -rf src/3rdparty/pcre
}

build() {
  cd "${srcdir}/${_pkgfqn}"

  # Setup flags
  export CFLAGS="-O2 -g -pipe -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions --param=ssp-buffer-size=4"
  export CXXFLAGS="-O2 -g -pipe -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions --param=ssp-buffer-size=4"
  unset LDFLAGS

  for _arch in ${_architectures}; do

    [ "${_arch}" == 'i686-w64-mingw32' ] && platform='win32-g++-cross'
    [ "${_arch}" == 'x86_64-w64-mingw32' ] && platform='win32-g++-cross-x64'

    # Generic configure arguments
    # Phonon is disabled for now because we lack the directx headers
    qt_configure_args="\
      -optimized-qmake \
      -verbose \
      -opensource \
      -confirm-license \
      -force-pkg-config \
      -force-debug-info \
      -audio-backend \
      -system-zlib \
      -system-libpng \
      -system-libjpeg \
      -system-sqlite \
      -no-fontconfig \
      -iconv \
      -openssl \
      -dbus-linked \
      -no-glib \
      -no-gtkstyle \
      -no-icu \
      -release \
      -nomake examples \
      -make tools \
      -hostprefix /usr/${_arch} \
      -hostdatadir /usr/${_arch}/share/qt5 \
      -prefix /usr/${_arch} \
      -bindir /usr/${_arch}/bin \
      -archdatadir /usr/${_arch}/share/qt5 \
      -datadir /usr/${_arch}/share/qt5 \
      -docdir /usr/${_arch}/share/doc/qt5 \
      -examplesdir /usr/${_arch}/share/qt5/examples \
      -headerdir /usr/${_arch}/include/qt5 \
      -libdir /usr/${_arch}/lib \
      -plugindir /usr/${_arch}/lib/qt5/plugins \
      -sysconfdir /usr/${_arch}/etc \
      -translationdir /usr/${_arch}/share/qt5/translations \
      -xplatform ${platform}"

    unset PKG_CONFIG_PATH

    # MySQL lib is -lmysql not mysqlclient, so fix that in config tests
    sed -e 's|lmysqlclient_r|lmysql|g' -i "${srcdir}/${_pkgfqn}/config.tests/unix/mysql_r/mysql_r.pro"
    sed -e 's|lmysqlclient|lmysql|g' -i "${srcdir}/${_pkgfqn}/config.tests/unix/mysql/mysql.pro"
    # add QMAKE_CFLAGS_MYSQL to mysql cflags
    echo 'LIBS *= $$QT_LFLAGS_MYSQL' >> "${srcdir}/${_pkgfqn}/src/sql/drivers/mysql/qsql_mysql.pri"
    echo 'QMAKE_CXXFLAGS *= $$QT_CFLAGS_MYSQL' >> "${srcdir}/${_pkgfqn}/src/sql/drivers/mysql/qsql_mysql.pri"
    # Qt doesn't detect mysql correctly, so use this:
    export QT_CFLAGS_MYSQL="-I/usr/${_arch}/include/mysql -DBIG_JOINS=1"
    export QT_LFLAGS_MYSQL="-L/usr/${_arch}/lib -lmysql -lpthread -lz -lm -lssl -lcrypto"
    export QT_LFLAGS_MYSQL_R="-L/usr/${_arch}/lib -lmysql -lpthread -lz -lm -lssl -lcrypto"
    # Hardcode MySQL flags into configure (really nice solution :( )
    sed -e "s|^QT_CFLAGS_MYSQL=.*$|QT_CFLAGS_MYSQL=\"${QT_CFLAGS_MYSQL}\"|g" -i "${srcdir}/${_pkgfqn}/configure"
    sed -e "s|^QT_LFLAGS_MYSQL=.*$|QT_LFLAGS_MYSQL=\"${QT_LFLAGS_MYSQL}\"|g" -i "${srcdir}/${_pkgfqn}/configure"
    sed -e "s|^QT_LFLAGS_MYSQL_R=.*$|QT_LFLAGS_MYSQL_R=\"${QT_LFLAGS_MYSQL_R}\"|g" -i "${srcdir}/${_pkgfqn}/configure"
    qt_configure_args_mysql="-mysql_config /this/file/should/not/exist"

    mkdir ../build-${_arch} && pushd ../build-${_arch}

    if isStatic; then
      ../${_pkgfqn}/configure -static $qt_configure_args $qt_configure_args_mysql
      make
    else
      ../${_pkgfqn}/configure -shared $qt_configure_args $qt_configure_args_mysql
      LD_LIBRARY_PATH=`pwd`/lib make
    fi

    popd
  done
}

package() {
  for _arch in ${_architectures}; do
    cd "$srcdir/${_pkgfqn}"
    make install -C ../build-${_arch} INSTALL_ROOT="${pkgdir}"

    if isStatic; then
      # The pkg-config files for Qt5Bootstrap aren't interesting as this particular
      # library only contains native code and not cross-compiled code
      rm -f "${pkgdir}/usr/${_arch}/lib/pkgconfig/Qt5Bootstrap.pc"

      # Drop the qtmain and Qt5Bootstrap static libraries from the static tree as
      # they are already part of the main tree
      rm -f "${pkgdir}/usr/${_arch}/lib/libqtmain"*
      rm -f "${pkgdir}/usr/${_arch}/lib/libQt5Bootstrap"*

      # we want to keep a couple pri files not found in base
      mv "${pkgdir}/usr/${_arch}/share/qt5/mkspecs/modules/qt_plugin_"*.pri "${pkgdir}/usr/${_arch}"

      # Delete duplicate files that are in the base package
      rm -fR "${pkgdir}/usr/${_arch}/"{bin,include,share,lib/pkgconfig,lib/cmake}

      # move pri files back
      mkdir -p "${pkgdir}/usr/${_arch}/share/qt5/mkspecs/modules"
      mv "${pkgdir}/usr/${_arch}/"*.pri "${pkgdir}/usr/${_arch}/share/qt5/mkspecs/modules"
    else # not static => shared release

      # The mingw gcc compiler assumes that /usr/i686-w64-mingw32/lib and
      # /usr/x86_64-w64-mingw32/lib are paths which need to be searched
      # during linking for cross-compiled libraries. As this isn't intended and
      # introduces unwanted side effects (related to building mingw-qt5-qttools)
      # remove the reference to it
      # THIS DOES NOT CORRECTLY WORK SINCE FEDORA HAS BOTH /usr/$arch/lib AND /usr/$arch/sys-root/mingw/lib
      sed -i s@"\"/usr/${_arch}/lib\" "@@g "${pkgdir}/usr/${_arch}/share/qt5/mkspecs/qconfig.pri"
    
      # Rename the .a files to .dll.a as they're actually import libraries and not static libraries
      for FN in "${pkgdir}/usr/${_arch}/lib/"*.a ; do
        # Ignore libqtmain*.a
        echo $FN | grep -q qtmain && continue
        echo $FN | grep -q libQt5Bootstrap && continue

        # Rename the file
        FN_NEW=$(echo $FN | sed s/'.a$'/'.dll.a'/)
        mv $FN $FN_NEW
      done

      # Rename qtmain.a to a non-conflicting file name
      # The updated filename is already set correctly in the bundled mkspecs profiles
      mv "${pkgdir}/usr/${_arch}/lib/libqtmain.a" "${pkgdir}/usr/${_arch}/lib/libqt5main.a"

      # The .dll's are installed in both bindir and libdir
      # One copy of the .dll's is sufficient
      rm -f "${pkgdir}/usr/${_arch}/lib/"*.dll

      # Drop all the files which we don't need
      rm -f "${pkgdir}/usr/${_arch}/lib/libQt5Bootstrap.la"
      rm -rf "${pkgdir}/usr/${_arch}/lib/pkgconfig"

      # Manually install qmake and other native tools so we don't depend anymore on
      # the version of the native system Qt and also fix issues as illustrated at
      # http://stackoverflow.com/questions/6592931/building-for-windows-under-linux-using-qt-creator
      # Also make sure the tools can be found by CMake
      mkdir -p "${pkgdir}/usr/bin"
      mkdir -p "${pkgdir}/usr/${_arch}/bin"
      for tool in qmake moc rcc uic qdbuscpp2xml qdbusxml2cpp qdoc syncqt.pl; do
        mv "${pkgdir}/usr/${_arch}/bin/${tool}" "${pkgdir}/usr/${_arch}/bin/${tool}-qt5"
        ln -s ../${_arch}/bin/${tool}-qt5 "${pkgdir}/usr/bin/${_arch}-${tool}-qt5"
      done

      # Make sure that all Qt projects use the tools which are provided by this package
      [ "${_arch}" == 'i686-w64-mingw32' ] && platform='win32-g++-cross'
      [ "${_arch}" == 'x86_64-w64-mingw32' ] && platform='win32-g++-cross-x64'
      sed -i s@'#QT_TOOL'@'QT_TOOL'@ "${pkgdir}/usr/${_arch}/share/qt5/mkspecs/${platform}/qmake.conf"

      # the patch provided by fedora still doesn't completly fix things
      # /bin/uic should be /bin/uic-qt5 in Qt5WidgetsConfigExtras.camke
      # liblocation should be in bin and not in lib (dll files are only in bin)
      # libqtmain.a should be libqt5main.a in Qt5CoreConfigExtras.cmake
      sed -e 's|\(set(imported_location "${_qt5[a-zA-Z]*_install_prefix}/bin/[a-z]*\)\(")\)|\1-qt5\2|g' \
          -e 's|\(set(imported_location "${_qt5[a-zA-Z]*_install_prefix}/\)lib\(/${LIB_LOCATION}"\)|\1bin\2|g' \
          -e 's|libqtmain.a|libqt5main.a|g' -i "${pkgdir}/usr/${_arch}/lib/cmake/"*/*.cmake
    fi

    # Remove prl files
    rm -f "${pkgdir}/usr/${_arch}/lib"{,/qt5/plugins/*}/*.prl

    # And finaly, strip the binaries
    if isStatic; then
      ${_arch}-strip --strip-debug "${pkgdir}/usr/${_arch}/lib/"*.a # static libs
    else
      ${_arch}-strip --strip-unneeded "${pkgdir}/usr/${_arch}/lib/libqt5main"*.a
      ${_arch}-strip --strip-unneeded "${pkgdir}/usr/${_arch}/bin/"*.dll
      ${_arch}-strip --strip-unneeded "${pkgdir}/usr/${_arch}/lib/"*.dll.a # dynamic lib interfaces
      ${_arch}-strip --strip-unneeded "${pkgdir}/usr/${_arch}/lib/qt5/plugins/"*/*.dll
      strip --strip-unneeded "${pkgdir}/usr/${_arch}/lib/libQt5Bootstrap.so.${pkgver}"
    fi
  done
}
